/*
 * generated by Xtext 2.32.0
 */
package it.unibo.spe.mdd.sheduler.generator;

import it.unibo.spe.mdd.sheduler.TimeUtils;
import it.unibo.spe.mdd.sheduler.sheduler.Task;
import it.unibo.spe.mdd.sheduler.sheduler.TaskPool;
import it.unibo.spe.mdd.sheduler.sheduler.TaskPoolSet;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;

import java.io.*;
import java.util.Map;
import java.util.stream.Collectors;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
public class ShedulerGenerator extends AbstractShedulerGenerator {
	@Override
	public void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		File inputFile = new File(resource.getURI().toFileString());
		TaskPoolSet taskPools = (TaskPoolSet) resource.getContents().get(0);
		String inputFileName = inputFile.getName().split("\\.")[0];
		try {
			var runtimeClass = javaTemplateFile("ShedulerRuntime");
			fsa.generateFile("ShedulerRuntime.java", runtimeClass);

			var taskClass = javaTemplateFile("ShedulerTask");
			fsa.generateFile("ShedulerTask.java", taskClass);

			var systemClass = javaTemplateFile("ShedulerSystem", Map.of(
					"INPUT", inputFileName,
					"TASK_POOLS_CALLS", generateTaskPoolsCalls(taskPools),
					"TASK_POOLS_DEFS", generateTaskPoolsDefinitions(taskPools)
			));
			fsa.generateFile("ShedulerSystem_" + inputFileName + ".java", systemClass);
		} catch (IOException e) {
			throw new Error("Buggy generator: missing template.", e);
		}
	}

	private String generateTaskPoolMethodName(TaskPool taskPool, int index) {
		return "pool_" + (taskPool.getName() == null ? Integer.toString(index) : taskPool.getName());
	}

	private String generateTaskPoolsDefinitions(TaskPoolSet taskPools) throws IOException {
		StringBuilder sb = new StringBuilder();
		for (int i = 0; i < taskPools.getPools().size(); i++) {
			TaskPool pool = taskPools.getPools().get(i);
			sb.append(javaTemplateFile("taskPool", Map.of(
					"ID", generateTaskPoolMethodName(pool, i),
					"TASKS", generateTaskPool(pool)
			)));
			sb.append("\n");
		}
		return sb.toString();
	}
	
	private String generateTaskPoolsCalls(TaskPoolSet taskPools) {
		StringBuilder sb = new StringBuilder();
		for (int i = 0; i < taskPools.getPools().size(); i++) {
			TaskPool pool = taskPools.getPools().get(i);
			sb.append(generateTaskPoolMethodName(pool, i) + "(runtime);");
			sb.append("\n");
		}
		return sb.toString();
	}
	
	private String generateTaskPool(TaskPool taskPool) {
		StringBuilder sb = new StringBuilder();
		for (int i = 0; i < taskPool.getTasks().size(); i++) {
			sb.append(generateTask(i, taskPool.getTasks().get(i)));
			sb.append("\n");
		}
		return sb.toString();
	}

	private String generateTask(int i, Task task) {
		if (task.getAbsolute() == null && task.getRelative() != null) {
			return generateRelativeTask(i, task);
		} else if (task.getAbsolute() != null && task.getRelative() == null) {
			return generateAbsoluteTask(i, task);
		} else {
			throw new Error("Buggy generator: task " + i + " has both absolute and relative time.");
		}
	}

	private String templateForAbsoluteTask(Task task) {
		var template = "ShedulerTask task__INDEX__ = ShedulerTask.at(__NAME__, \"__CMD__\", \"__ENTRY__\", LocalDateTime.parse(\"__WHEN__\"));";
		if (task.getPeriod() != null) {
			template += "\ntask__INDEX__.setPeriodic(Duration.parse(\"__PERIOD__\"));";
		}
		return template;
	}

	private String generateAbsoluteTask(int i, Task task) {
		return replace(
				templateForAbsoluteTask(task),
				Map.of(
						"INDEX", String.valueOf(i),
						"NAME", task.getName() == null ? "null" : "\"" + task.getName() + "\"",
						"CMD", task.getCommand(),
						"ENTRY", task.getEntrypoint(),
						"WHEN", TimeUtils.toLocalDateTime(task.getAbsolute()).toString(),
						"PERIOD", task.getPeriod() == null ? "" : TimeUtils.toDuration(task.getPeriod()).toString()
				)
		);
	}

	private String templateForRelativeTask(Task task) {
		var template = "ShedulerTask task__INDEX__ = ShedulerTask.in(__NAME__, \"__CMD__\", \"__ENTRY__\", Duration.parse(\"__WHEN__\"));";
		if (task.getPeriod() != null) {
			template += "\ntask__INDEX__.setPeriodic(Duration.parse(\"__PERIOD__\"));";
		}
		return template;
	}

	private String generateRelativeTask(int i, Task task) {
		return replace(
				templateForRelativeTask(task),
				Map.of(
						"INDEX", String.valueOf(i),
						"NAME", task.getName() == null ? "null" : "\"" + task.getName() + "\"",
						"CMD", task.getCommand(),
						"ENTRY", task.getEntrypoint(),
						"WHEN", TimeUtils.toDuration(task.getRelative()).toString(),
						"PERIOD", task.getPeriod() == null ? "" : TimeUtils.toDuration(task.getPeriod()).toString()
				)
		);
	}
}
