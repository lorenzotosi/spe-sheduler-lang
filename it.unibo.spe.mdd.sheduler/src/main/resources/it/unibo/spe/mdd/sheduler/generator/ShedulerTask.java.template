package it.unibo.spe.mdd.sheduler;

import java.io.IOException;
import java.time.Duration;
import java.time.LocalDateTime;
import java.util.Objects;

public class ShedulerTask {

    private static int instanceCount = 0;

    private final String name;
    private final String command;
    private final String entrypoint;
    private Duration period;
    private final Duration delay;

    private ShedulerTask(String name, String command, String entrypoint, Duration delay) {
        this.name = name == null ? "task" + instanceCount++ : name;
        this.command = Objects.requireNonNull(command);
        this.entrypoint = Objects.requireNonNull(entrypoint);
        this.delay = delay != null ? delay : Duration.ZERO;
    }

    public static SheduleTask in(String name, String command, String entrypoint, Duration delay) {
        return new SheduleTask(name, command, entrypoint, delay);
    }

    public static SheduleTask in(String command, String entrypoint, Duration delay) {
        return in(null, command, entrypoint, delay);
    }

    public static SheduleTask at(String name, String command, String entrypoint, LocalDateTime dateTime) {
        return in(name, command, entrypoint, Duration.between(LocalDateTime.now(), dateTime));
    }

    public static SheduleTask at(String command, String entrypoint, LocalDateTime dateTime) {
        return at(null, command, entrypoint, dateTime);
    }

    public String getName() {
        return name;
    }

    public String getCommand() {
        return command;
    }

    public String getEntrypoint() {
        return entrypoint;
    }

    public Duration getPeriod() {
        return period;
    }

    public boolean isPeriodic() {
        return period != null;
    }

    public SheduleTask setPeriod(Duration period) {
        this.period = period;
        return this;
    }

    public Duration getDelay() {
        return delay;
    }

    public Process executeAsync() throws IOException {
        return new ProcessBuilder(entrypoint, command).inheritIO().start();
    }

    public Runnable asRunnable() {
        return () -> {
            try {
                executeAsync();
            } catch (IOException e) {
                e.printStackTrace();
            }
        };
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        SheduleTask that = (SheduleTask) o;
        return Objects.equals(name, that.name) && Objects.equals(command, that.command) && Objects.equals(entrypoint, that.entrypoint) && Objects.equals(period, that.period) && Objects.equals(delay, that.delay);
    }

    @Override
    public int hashCode() {
        return Objects.hash(name, command, entrypoint, period, delay);
    }

    @Override
    public String toString() {
        return "SheduleTask{" +
                "name='" + name + '\'' +
                ", command='" + command + '\'' +
                ", entrypoint='" + entrypoint + '\'' +
                ", period=" + period +
                ", delay=" + delay +
                '}';
    }
}
